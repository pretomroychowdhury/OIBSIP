# -*- coding: utf-8 -*-
"""EMAIL SPAM DETECTION WITH MACHINE LEARNING .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TEeT73i4y1V2_hJZknDhjSGi8HHpIbGH
"""

pip install nltk

import os
import nltk

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df = pd.read_csv('/content/spam (2).csv', encoding='latin-1')[['v1', 'v2']]
df.columns = ['label', 'message']
df.head()

df.groupby('label').describe()

sns.countplot(data=df, x='label')

import string
from nltk.corpus import stopwords
from nltk import PorterStemmer as Stemmer
def process(text):
    # lowercase it
    text = text.lower()
    # remove punctuation
    text = ''.join([t for t in text if t not in string.punctuation])
    # remove stopwords
    text = [t for t in text.split() if t not in stopwords.words('english')]
    # stemming
    st = Stemmer()
    text = [st.stem(t) for t in text]
    # return token list
    return text

nltk.download('stopwords')

process('It\'s holiday and we are playing cricket. Jeff is playing very well!!!')

df['message'][:20].apply(process)

from sklearn.feature_extraction.text import TfidfVectorizer

tfidfv = TfidfVectorizer(analyzer=process)
data = tfidfv.fit_transform(df['message'])

mess = df.iloc[2]['message']
print(mess)

print(tfidfv.transform([mess]))

from sklearn.pipeline import Pipeline
from sklearn.naive_bayes import MultinomialNB
spam_filter = Pipeline([
    ('vectorizer', TfidfVectorizer(analyzer=process)), 
    ('classifier', MultinomialNB())                    
])

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(df['message'], df['label'], test_size=0.20, random_state = 21)

spam_filter.fit(x_train, y_train)

predictions = spam_filter.predict(x_test)

count = 0
for i in range(len(y_test)):
    if y_test.iloc[i] != predictions[i]:
        count += 1
print('Total number of test cases', len(y_test))
print('Number of wrong of predictions', count)

x_test[y_test != predictions]

from sklearn.metrics import classification_report
print(classification_report(predictions, y_test))

def detect_spam(s):
    return spam_filter.predict([s])[0]
detect_spam('Your cash-balance is currently 500 pounds - to maximize your cash-in now, send COLLECT to 83600.')